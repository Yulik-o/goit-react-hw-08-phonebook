{"version":3,"file":"static/js/351.e27c6053.chunk.js","mappings":"0OAKO,SAASA,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOA,MAAjB,IAK/B,OACE,4BACE,mDACA,kBACEC,KAAK,OACLC,KAAK,SACLL,MAAOA,EACPM,SAVqB,SAAAC,GACzBT,GAASU,EAAAA,EAAAA,IAAUD,EAAEE,OAAOT,OAC7B,MAYF,C,+CCPD,EAdqBU,EAAAA,GAAAA,OAAH,mPCIX,SAASC,EAAT,GAA+C,IAAxBN,EAAuB,EAAvBA,KAAMO,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MACpCf,GAAWC,EAAAA,EAAAA,MAIjB,OACE,0BACGM,EADH,KACWO,GACT,SAAC,EAAD,CAAcE,GAAID,EAAOE,QANP,SAAAC,GACpBlB,GAASmB,EAAAA,EAAAA,IAAeD,EAAMP,OAAOK,IACtC,EAIG,sBAKL,CClBD,IAOA,EAPmBJ,EAAAA,GAAAA,GAAH,uICWT,SAASQ,IACd,IAAMpB,GAAWC,EAAAA,EAAAA,OACjBoB,EAAAA,EAAAA,YAAU,WACRrB,GAASsB,EAAAA,EAAAA,MACV,GAAE,CAACtB,IAEJ,IAAMuB,GAAiBpB,EAAAA,EAAAA,IAAYqB,EAAAA,IAMnC,OACE,SAAC,EAAD,UACGD,EAAeE,KAAI,gBAAGT,EAAH,EAAGA,GAAIT,EAAP,EAAOA,KAAMO,EAAb,EAAaA,OAAb,OAClB,SAACD,EAAD,CAAsBN,KAAMA,EAAMO,OAAQA,EAAQC,MAAOC,GAAvCA,EADA,KAKzB,C,kBC7BYU,EAAYd,EAAAA,GAAAA,OAAH,qNAUTe,EAAaf,EAAAA,GAAAA,KAAH,6ICFhB,SAASgB,IACd,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOtB,EAAP,KAAauB,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOf,EAAP,KAAeiB,EAAf,KACMC,GAAW7B,EAAAA,EAAAA,IAAY8B,EAAAA,IACvBjC,GAAWC,EAAAA,EAAAA,MAEXiC,EAAoB,SAAAhB,GAGxB,MAAwBA,EAAMP,OAAtBJ,EAAR,EAAQA,KAAML,EAAd,EAAcA,MACd,OAAQK,GACN,IAAK,OACHuB,EAAQ5B,GACR,MACF,IAAK,SACH6B,EAAU7B,GAKf,EAqBD,OACE,+BACE,UAACyB,EAAD,CAAYQ,SArBK,SAAAjB,GACnBA,EAAMkB,iBACN,IAAMC,EAAa,CAAE9B,KAAAA,EAAMO,OAAAA,GACXkB,EAASM,MAAK,SAAAC,GAC5B,OAAOA,EAAQhC,OAASA,CACzB,IAECiC,MAAM,GAAD,OAAIjC,EAAJ,6BAIPP,GAASyC,EAAAA,EAAAA,IAAWJ,IAKpBP,EAAQ,IACRC,EAAU,IAJX,EAQG,WACE,8BACE,qCACA,kBACEzB,KAAK,OACLC,KAAK,OACLmC,QAAQ,yHACRC,MAAM,yIACNzC,MAAOK,EACPC,SAAU0B,EACVU,UAAQ,QAGZ,8BACE,wCACA,kBACEtC,KAAK,MACLC,KAAK,SACLmC,QAAQ,yFACRC,MAAM,+FACNzC,MAAOY,EACPN,SAAU0B,EACVU,UAAQ,QAGZ,SAAClB,EAAD,CAAWpB,KAAK,SAAhB,6BAIP,CC5Ec,SAASuC,IACtB,OACE,4BACE,uCACA,SAACjB,EAAD,KACA,sCACA,SAAC7B,EAAD,KACA,SAACqB,EAAD,KACA,SAAC,KAAD,MAGL,C,8ICdYa,EAAiB,SAAA7B,GAAK,OAAIA,EAAM4B,SAASc,KAAnB,EACtBC,EAAc,SAAA3C,GAAK,OAAIA,EAAM4C,KAAKC,KAAf,EACnBC,EAAkB,SAAA9C,GAAK,OAAIA,EAAM4C,KAAKG,KAAf,EAEvB3B,GAAuB4B,EAAAA,EAAAA,IAClC,CAACnB,EANyB,SAAA7B,GAAK,OAAIA,EAAMC,MAAV,IAO/B,SAAC2B,EAAU3B,GACT,OAAO2B,EAAS3B,QAAO,SAAAkC,GAAO,OAC5BA,EAAQhC,KAAK8C,cAAcC,OAAOC,SAASlD,EAAOgD,cADtB,GAG/B,G","sources":["components/Filter/Filter.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/contactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/pages/ContactsPage.jsx","redux/selectors.js"],"sourcesContent":["//import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addFilter } from 'redux/filterSlice';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n  const value = useSelector(state => state.filter.filter);\n\n  const handleFilterChange = e => {\n    dispatch(addFilter(e.target.value));\n  };\n  return (\n    <div>\n      <h4>Find contacts by name</h4>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={handleFilterChange}\n      />\n    </div>\n  );\n}\n","import styled from 'styled-components'\n\nconst StyledButton = styled.button`\nmargin-right: 20px;\nmargin-left: 10px;\ncolor: white;\nbackground-color: rgb(152, 167, 152);\nborder: 1px solid rgb(152, 167, 152);\nborder-radius: 5px;\npadding: 3px;\n&:hover { \n background-color: #ebd7b2;  \n} \n\n`\n\nexport default StyledButton","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteContacts } from 'redux/operations';\nimport StyledButton from './ContactItem.styled';\n\nexport function ContactItem({ name, number, btnId }) {\n  const dispatch = useDispatch();\n  const deleteContact = event => {\n    dispatch(deleteContacts(event.target.id));\n  };\n  return (\n    <li>\n      {name}: {number}\n      <StyledButton id={btnId} onClick={deleteContact}>\n        Delete\n      </StyledButton>\n    </li>\n  );\n}\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n\n  btnId: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components'\nconst StyledList = styled.ul`\n list-style: none;\n display: flex;\n flex-direction: column;\n //justify-content: space-around;\n gap: 10px;\n`\nexport default StyledList","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  // selectContacts,\n  // selectFilter,\n  selectFilterContacts,\n} from 'redux/selectors';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { getContacts } from 'redux/operations';\nimport StyledList from './ContactList.styled';\n\nexport function ContactList() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const filterContacts = useSelector(selectFilterContacts);\n\n  // const filteredContacts = contacts.filter(contact =>\n  //   contact.name.toLowerCase().trim().includes(filter.toLowerCase())\n  // );\n\n  return (\n    <StyledList>\n      {filterContacts.map(({ id, name, number }) => (\n        <ContactItem key={id} name={name} number={number} btnId={id} />\n      ))}\n    </StyledList>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const StyledBtn = styled.button`\n  color: white;\n  border: 1px solid rgb(152, 167, 152);\n  background-color: rgb(152, 167, 152);\n  border-radius: 5px;\n  padding: 3px;\n  &:hover {\n    background-color: #ebd7b2;\n  }\n`;\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  justify-content: space-between;\n  gap: 15px;\n`;\n","import { useState } from 'react';\n//import PropTypes from 'prop-types';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\n//import { addContact } from 'redux/slice';\nimport { addContact } from 'redux/operations';\nimport { StyledBtn } from './contactForm.styled';\nimport { StyledForm } from './contactForm.styled';\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleInputChange = event => {\n    // setNumber({ [event.target.name]: event.target.value });\n    // setName({ [event.target.name]: event.target.value });\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const newContact = { name, number };\n    const isExist = contacts.some(contact => {\n      return contact.name === name;\n    });\n    if (isExist) {\n      alert(`${name} is already in contacts`);\n\n      return;\n    }\n    dispatch(addContact(newContact));\n    reset();\n  };\n\n  function reset() {\n    setName('');\n    setNumber('');\n  }\n  return (\n    <>\n      <StyledForm onSubmit={handleSubmit}>\n        <label>\n          <span>Name </span>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            value={name}\n            onChange={handleInputChange}\n            required\n          />\n        </label>\n        <label>\n          <span> Number </span>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            value={number}\n            onChange={handleInputChange}\n            required\n          />\n        </label>\n        <StyledBtn type=\"submit\">Add contact</StyledBtn>\n      </StyledForm>\n    </>\n  );\n}\n","import React from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nexport default function ContactsPage() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      <Outlet />\n    </div>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectFilter = state => state.filter;\nexport const selectContacts = state => state.contacts.items;\nexport const selectToken = state => state.auth.token;\nexport const selectUserEmail = state => state.auth.email;\n\nexport const selectFilterContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().trim().includes(filter.toLowerCase())\n    );\n  }\n);\n"],"names":["Filter","dispatch","useDispatch","value","useSelector","state","filter","type","name","onChange","e","addFilter","target","styled","ContactItem","number","btnId","id","onClick","event","deleteContacts","ContactList","useEffect","getContacts","filterContacts","selectFilterContacts","map","StyledBtn","StyledForm","ContactForm","useState","setName","setNumber","contacts","selectContacts","handleInputChange","onSubmit","preventDefault","newContact","some","contact","alert","addContact","pattern","title","required","ContactsPage","items","selectToken","auth","token","selectUserEmail","email","createSelector","toLowerCase","trim","includes"],"sourceRoot":""}